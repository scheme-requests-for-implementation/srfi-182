;;; adbmal adbmals adbmal* alet alet* --- define-syntax

(define-syntax adbmal
  (syntax-rules ()
    ((adbmal . arg) (lambda (f) (f . arg)))))
(define-syntax adbmals
  (syntax-rules ()
    ((adbmals . arg) (lambda (f) (apply f . arg)))))
(define (adbmal* . args) (lambda (f) (apply f args)))

(define-syntax alet-and
  (syntax-rules ()
    ((alet-and (nvt ...) bd ...)
     (alet-and "and" () (nvt ...) bd ...))
    ((alet-and "and" (nt ...) ((n v) nvt ...) bd ...)
     (let ((t v))
       (and t (alet-and "and" (nt ... (n t)) (nvt ...) bd ...))))
    ((alet-and "and" (nt ...) ((n v t) nvt ...) bd ...)
     (let ((tt v))
       (and (let ((n tt)) t)
	    (alet-and "and" (nt ... (n tt)) (nvt ...) bd ...))))
    ((alet-and "and" ((n t) ...) () bd ...)
     ((lambda (n ...) bd ...) t ...))))

(define-syntax alet-and*
  (syntax-rules ()
    ((alet-and* () bd ...)
     ((lambda () bd ...)))
    ((alet-and* ((n v) nvt ...) bd ...)
     (let ((n v))
       (and n (alet-and* (nvt ...) bd ...))))
    ((alet-and* ((n v t) nvt ...) bd ...)
     (let ((n v))
       (and t (alet-and* (nvt ...) bd ...))))))

(define-syntax alet-rec
  (syntax-rules ()
    ((alet-rec ((n v) ...) bd ...)
     (alet-rec "rec" () ((n v) ...) bd ...))
    ((alet-rec "rec" (nvt ...) ((n v) nv ...) bd ...)
     (alet-rec "rec" (nvt ... (n v t)) (nv ...) bd ...))
    ((alet-rec "rec" ((n v t) ...) () bd ...)
     (let ((n '<undefined>) ...)
       (let ((t v) ...)
	 (set! n t) ...
	 (let () bd ...))))))

(define-syntax alet-rec*
  (syntax-rules ()
    ((alet-rec* ((n v) ...) bd ...)
     ;; (let* ((n '<undefined>) ...)	;duplication
     (let ((n '<undefined>) ...)	;no duplication
       (set! n v) ...
       (let () bd ...)))))

(define-syntax lambda*
  (syntax-rules ()
    ((lambda* (a . e) bd ...)
     (lambda* "*" (ta) (a) e bd ...))
    ((lambda* "*" (t ...) (n ...) (a . e) bd ...)
     (lambda* "*" (t ... ta) (n ... a) e bd ...))
    ((lambda* "*" (t ...) (n ...) () bd ...)
     (lambda (t ...)
       (let* ((n t) ...) bd ...)))
    ((lambda* "*" (t ...) (n ...) e bd ...)
     (lambda (t ... . te)
       (let* ((n t) ... (e te)) bd ...)))
    ((lambda* e bd ...)
     (lambda e bd ...))))

(define-syntax wow-opt
  (syntax-rules ()
    ((wow-opt n v) v)
    ((wow-opt n v t)
     (wow-opt n v t n))
    ((wow-opt n v t ts)
     (let ((n v)) (if t ts (error 'alet* "bad argument" n 'n 't))))
    ((wow-opt n v t ts fs)
     (let ((n v)) (if t ts fs)))))

(define-syntax wow-cat!
  (syntax-rules ()
    ((wow-cat! z n d)
     (let ((n (car z)))
       (set! z (cdr z))
       n))
    ((wow-cat! z n d t)
     (wow-cat! z n d t n))
    ((wow-cat! z n d t ts)
     (let ((n (car z)))
       (if t
	   (begin (set! z (cdr z)) ts)
	   (let lp ((head (list n)) (tail (cdr z)))
	     (if (null? tail)
		 d
		 (let ((n (car tail)))
		   (if t
		       (begin (set! z (append (reverse head) (cdr tail))) ts)
		       (lp (cons n head) (cdr tail)))))))))
    ((wow-cat! z n d t ts fs)
     (let ((n (car z)))
       (set! z (cdr z))
       (if t ts fs)))))

(define (wow-key z k d)
  (let ((x (car z))
	(y (cdr z)))
    (if (null? y)
	(cons d z)
	(if (eq? k x)
	    y
	    (let lp ((head (list x (car y))) (tail (cdr y)))
	      (if (null? tail)
		  (cons d z)
		  (let ((x (car tail))
			(y (cdr tail)))
		    (if (null? y)
			(cons d z)
			(if (eq? k x)
			    (cons (car y) (append head (cdr y)))
			    (lp (cons x (cons (car y) head)) (cdr y)))))))))))
(define-syntax wow-key!
  (syntax-rules ()
    ((wow-key! z m (n k) d)
     (wow-key! z m (n k eq?) d))
    ((wow-key! z 2 (n k f) d)
     ;; two in a time: k1 1 k2 2 (k3 3) k4 4 k5 5 -> k2 2 k1 1 k4 4 k5 5
     (let ((x (car z))
     	   (y (cdr z)))
       (if (null? y)
     	   d
     	   (if (f k x)
     	       (begin (set! z (cdr y)) (car y))
     	       (let lp ((head (list x (car y))) (tail (cdr y)))
     		 (if (null? tail)
     		     d
     		     (let ((x (car tail))
     			   (y (cdr tail)))
     		       (if (null? y)
     			   d
     			   (if (f k x)
     			       (begin (set! z (append head (cdr y)))
     				      (car y))
     			       (lp (cons x (cons (car y) head)) (cdr y)))))))))))
    ((wow-key! z 1 (n k f) d)
     ;; one in a time: 1 2 3 4 (5 6) 7 8 -> 1 2 3 4 7 8
     (let ((x (car z))
     	   (y (cdr z)))
       (if (null? y)
     	   d
     	   (if (f k x)
     	       (begin (set! z (cdr y)) (car y))
     	       (let lp ((head (list x)) (tail y))
     		 (let ((x (car tail))
     		       (y (cdr tail)))
     		   (if (null? y)
     		       d
     		       (if (f k x)
     			   (begin (set! z (append (reverse head) (cdr y)))
     				  (car y))
     			   (lp (cons x head) y)))))))))
    ((wow-key! z m (n k) d t)
     (wow-key! z m (n k eq?) d t n))
    ((wow-key! z m (n k f) d t)
     (wow-key! z m (n k f) d t n))
    ((wow-key! z m (n k) d t ts)
     (wow-key! z m (n k eq?) d t ts))
    ((wow-key! z m (n k f) d t ts)
     (wow-key! z m (n k f) d t ts (error 'alet* "bad argument" n 'n 't)))
    ((wow-key! z m (n k) d t ts fs)
     (wow-key! z m (n k eq?) d t ts fs))
    ((wow-key! z 2 (n k f) d t ts fs)
     ;; two in a time: k1 1 k2 2 (k3 3) k4 4 k5 5 -> k2 2 k1 1 k4 4 k5 5
     (let ((x (car z))
     	   (y (cdr z)))
       (if (null? y)
     	   d
     	   (if (f k x)
     	       (let ((n (car y)))
     		 (set! z (cdr y))
     		 (if t ts fs))
     	       (let lp ((head (list x (car y))) (tail (cdr y)))
     		 (if (null? tail)
     		     d
     		     (let ((x (car tail))
     			   (y (cdr tail)))
     		       (if (null? y)
     			   d
     			   (if (f k x)
     			       (let ((n (car y)))
     				 (set! z (append head (cdr y)))
     				 (if t ts fs))
     			       (lp (cons x (cons (car y) head)) (cdr y)))))))))))
    ((wow-key! z 1 (n k f) d t ts fs)
     ;; one in a time: 1 2 3 4 (5 6) 7 8 -> 1 2 3 4 7 8
     (let ((x (car z))
     	   (y (cdr z)))
       (if (null? y)
     	   d
     	   (if (f k x)
     	       (let ((n (car y)))
     		 (set! z (cdr y))
     		 (if t ts fs))
     	       (let lp ((head (list x)) (tail y))
     		 (let ((x (car tail))
     		       (y (cdr tail)))
     		   (if (null? y)
     		       d
     		       (if (f k x)
     			   (let ((n (car y)))
     			     (set! z (append (reverse head) (cdr y)))
     			     (if t ts fs))
     			   (lp (cons x head) y)))))))))))

(define-syntax %alet
  (syntax-rules (adbmal values cons rec and opt quote quasiquote unquote)
    ((%alet () ((n v) ...) () bd ...)
     ((lambda (n ...) bd ...) v ...))
    ((%alet (var) ((n v) ...) () bd ...)
     ((letrec ((var (lambda (n ...) bd ...)))
	var) v ...))
    ((%alet (var (p ...) (nv ...) (bn ...)) ((n v) ...) () bd ...)
     ((letrec ((t (lambda (v ...)
		    (%alet (p ...) (nv ... (n v) ... (var t)) (bn ...) bd ...))))
	t) v ...))

    ((%alet (p ...) (nv ...) (((a) b) bn ...) bd ...)
     ((lambda (t) (%alet (p ...) (nv ... (a t)) (bn ...) bd ...)) b))

    ((%alet (p ...) (nv ...) (((adbmal . b) c) bn ...) bd ...)
     (%alet "one" (p ...) (nv ...) (adbmal) (b c) (bn ...) bd ...))
    ((%alet (p ...) (nv ...) (((values . b) c) bn ...) bd ...)
     (%alet "one" (p ...) (nv ...) (values) (b c) (bn ...) bd ...))
    ((%alet (p ...) (nv ...) (((cons a b) c) bn ...) bd ...)
     (let ((z c))			;should be exist!
       ((lambda (ta tb) (%alet (p ...) (nv ... (a ta) (b tb)) (bn ...) bd ...)) (car z) (cdr z))))
    ((%alet (p ...) (nv ...) (((a . b) c) bn ...) bd ...)
     (%alet "one" (p ...) (nv ... (a t)) (t) (b c) (bn ...) bd ...))
    ((%alet "one" (p ...) (nv ...) (t ...) ((a . b) c) (bn ...) bd ...)
     (%alet "one" (p ...) (nv ... (a tn)) (t ... tn) (b c) (bn ...) bd ...))
    ((%alet "one" (p ...) (nv ...) (adbmal t ...) (() c) (bn ...) bd ...)
     (c (lambda (t ...) (%alet (p ...) (nv ...) (bn ...) bd ...))))
    ((%alet "one" (p ...) (nv ...) (values t ...) (() c) (bn ...) bd ...)
     ;; (receive (t ...) c (%alet (p ...) (nv ...) (bn ...) bd ...)))
     (call-with-values (lambda () c)
       (lambda (t ...) (%alet (p ...) (nv ...) (bn ...) bd ...))))
    ((%alet "one" (p ...) (nv ...) (t ...) (() c) (bn ...) bd ...)
     (apply (lambda (t ...) (%alet (p ...) (nv ...) (bn ...) bd ...)) c))
    ((%alet "one" (p ...) (nv ...) (adbmal t ...) (b c) (bn ...) bd ...)
     (c (lambda (t ... . tn) (%alet (p ...) (nv ... (b tn)) (bn ...) bd ...))))
    ((%alet "one" (p ...) (nv ...) (values t ...) (b c) (bn ...) bd ...)
     ;; (receive (t ... . tn) c (%alet (p ...) (nv ... (b tn)) (bn ...) bd ...)))
     (call-with-values (lambda () c)
       (lambda (t ... . tn) (%alet (p ...) (nv ... (b tn)) (bn ...) bd ...))))
    ((%alet "one" (p ...) (nv ...) (t ...) (b c) (bn ...) bd ...)
     (apply (lambda (t ... . tn) (%alet (p ...) (nv ... (b tn)) (bn ...) bd ...)) c))

    ((%alet (p ...) (nv ...) (((a . b) c d ...) bn ...) bd ...)
     (%alet "dot" (p ...) (nv ... (a t)) (t) (b c d ...) (bn ...) bd ...))
    ((%alet "dot" (p ...) (nv ...) (t ...) ((a . b) c d ...) (bn ...) bd ...)
     (%alet "dot" (p ...) (nv ... (a tn)) (t ... tn) (b c d ...) (bn ...) bd ...))
    ((%alet "dot" (p ...) (nv ...) (t ...) (() c d ...) (bn ...) bd ...)
     ((lambda (t ...) (%alet (p ...) (nv ...) (bn ...) bd ...)) c d ...))
    ((%alet "dot" (p ...) (nv ...) (t ...) (b c d ...) (bn ...) bd ...)
     ((lambda (t ... . tn)
	(%alet (p ...) (nv ... (b tn)) (bn ...) bd ...)) c d ...))

    ((%alet (p ...) (nv ...) ((and (n v t ...) nvt ...) bn ...) bd ...)
     (%alet "and" (p ...) (nv ...) ((n v t ...) nvt ...) (bn ...) bd ...))
    ((%alet "and" (p ...) (nv ...) ((n v) nvt ...) (bn ...) bd ...)
     (let ((t v))
       (and t (%alet "and" (p ...) (nv ... (n t)) (nvt ...) (bn ...) bd ...))))
    ((%alet "and" (p ...) (nv ...) ((n v t) nvt ...) (bn ...) bd ...)
     (let ((tt v))
       (and (let ((n tt)) t)
	    (%alet "and" (p ...) (nv ... (n tt)) (nvt ...) (bn ...) bd ...))))
    ((%alet "and" (p ...) (nv ...) () (bn ...) bd ...)
     (%alet (p ...) (nv ...) (bn ...) bd ...))

    ((%alet (p ...) (nv ...) ((rec (n v) mv ...) bn ...) bd ...)
     (%alet "rec" (p ...) (nv ...) () ((n v) mv ...) (bn ...) bd ...))
    ((%alet "rec" (p ...) (nv ...) (nvt ...) ((n v) mv ...) (bn ...) bd ...)
     (%alet "rec" (p ...) (nv ... (n t)) (nvt ... (n v t)) (mv ...) (bn ...) bd ...))
    ((%alet "rec" (p ...) (nv ...) ((n v t) ...) () (bn ...) bd ...)
     ((letrec ((n v) ...) (adbmal n ...))
      (lambda (t ...) (%alet (p ...) (nv ...) (bn ...) bd ...))))

    ((%alet (p ...) (nv ...) ((a b) bn ...) bd ...)
     ((lambda (t) (%alet (p ...) (nv ... (a t)) (bn ...) bd ...)) b))

    ((%alet (p ...) (nv ...) ((opt z . e) bn ...) bd ...)
     (let ((y z))
       (%alet "opt" (p ...) (nv ...) y e (bn ...) bd ...)))
    ((%alet "opt" (p ...) (nv ...) z ((('n k ...) d t ...) . e) (bn ...) bd ...)
     (let ((v (if (null? z) d (wow-key! z 2 (n k ...) d t ...))))
       (%alet "opt" (p ...) (nv ... (n v)) z e (bn ...) bd ...)))
    ((%alet "opt" (p ...) (nv ...) z (((`n k ...) d t ...) . e) (bn ...) bd ...)
     (let ((v (if (null? z) d (wow-key! z 1 (n k ...) d t ...))))
       (%alet "opt" (p ...) (nv ... (n v)) z e (bn ...) bd ...)))
    ((%alet "opt" (p ...) (nv ...) z (('n d t ...) . e) (bn ...) bd ...)
     (let ((v (if (null? z) d (wow-key! z 2 (n 'n eq?) d t ...))))
       (%alet "opt" (p ...) (nv ... (n v)) z e (bn ...) bd ...)))
    ((%alet "opt" (p ...) (nv ...) z ((`n d t ...) . e) (bn ...) bd ...)
     (let ((v (if (null? z) d (wow-key! z 1 (n `n eq?) d t ...))))
       (%alet "opt" (p ...) (nv ... (n v)) z e (bn ...) bd ...)))
    ((%alet "opt" (p ...) (nv ...) z ((,n d t ...) . e) (bn ...) bd ...)
     (let ((v (if (null? z) d (wow-cat! z n d t ...))))
       (%alet "opt" (p ...) (nv ... (n v)) z e (bn ...) bd ...)))
    ((%alet "opt" (p ...) (nv ...) z (((n k) d) . e) (bn ...) bd ...)
     (let* ((z (if (null? z) (cons d z) (wow-key z k d)))
	    (t (car z))
	    (z (cdr z)))
       (%alet "opt" (p ...) (nv ... (n t)) z e (bn ...) bd ...)))
    ((%alet "opt" (p ...) (nv ...) z ('n . e) (bn ...) bd ...)
     (let ((v (if (null? z) #f (wow-key! z 2 (n 'n eq?) #f))))
       (%alet "opt" (p ...) (nv ... (n v)) z e (bn ...) bd ...)))
    ((%alet "opt" (p ...) (nv ...) z (`n . e) (bn ...) bd ...)
     (let ((v (if (null? z) #f (wow-key! z 1 (n `n eq?) #f))))
       (%alet "opt" (p ...) (nv ... (n v)) z e (bn ...) bd ...)))
    ((%alet "opt" (p ...) (nv ...) z (,n . e) (bn ...) bd ...)
     (let ((v (if (null? z) #f (wow-cat! z n #f))))
       (%alet "opt" (p ...) (nv ... (n v)) z e (bn ...) bd ...)))
    ((%alet "opt" (p ...) (nv ...) z ((n d) . e) (bn ...) bd ...)
     (let ((y (if (null? z) z (cdr z)))
	   (v (if (null? z) d (car z))))
       (%alet "opt" (p ...) (nv ... (n v)) y e (bn ...) bd ...)))
    ((%alet "opt" (p ...) (nv ...) z ((n d t ...) . e) (bn ...) bd ...)
     (let ((y (if (null? z) z (cdr z)))
	   (v (if (null? z) d (wow-opt n (car z) t ...))))
       (%alet "opt" (p ...) (nv ... (n v)) y e (bn ...) bd ...)))
    ((%alet "opt" (p ...) (nv ...) z (n . e) (bn ...) bd ...)
     (let ((y (if (null? z) z (cdr z)))
	   (v (if (null? z) #f (car z))))
       (%alet "opt" (p ...) (nv ... (n v)) y e (bn ...) bd ...)))
    ((%alet "opt" (p ...) (nv ...) z () (bn ...) bd ...)
     (if (null? z)
	 (%alet (p ...) (nv ...) (bn ...) bd ...)
	 (error 'alet* "too many arguments" z)))
    ((%alet "opt" (p ...) (nv ...) z e (bn ...) bd ...)
     (let ((v z))
       (%alet (p ...) (nv ... (e v)) (bn ...) bd ...)))

    ((%alet (p ...) (nv ...) ((adbmal a b c ...) bn ...) bd ...)
     (%alet "not" (p ...) (nv ... (a t)) (adbmal t) (b c ...) (bn ...) bd ...))
    ((%alet (p ...) (nv ...) ((values a b c ...) bn ...) bd ...)
     (%alet "not" (p ...) (nv ... (a t)) (values t) (b c ...) (bn ...) bd ...))
    ((%alet (p ...) (nv ...) ((cons a b c) bn ...) bd ...)
     (let ((z c))			;should be exist!
       ((lambda (ta tb) (%alet (p ...) (nv ... (a ta) (b tb)) (bn ...) bd ...)) (car z) (cdr z))))
    ((%alet (p ...) (nv ...) ((a b c ...) bn ...) bd ...)
     (%alet "not" (p ...) (nv ... (a t)) (t) (b c ...) (bn ...) bd ...))
    ((%alet "not" (p ...) (nv ...) (t ...) (a b c ...) (bn ...) bd ...)
     (%alet "not" (p ...) (nv ... (a tn)) (t ... tn) (b c ...) (bn ...) bd ...))
    ((%alet "not" (p ...) (nv ...) (adbmal t ...) (z) (bn ...) bd ...)
     (z (lambda (t ...) (%alet (p ...) (nv ...) (bn ...) bd ...))))
    ((%alet "not" (p ...) (nv ...) (values t ...) (z) (bn ...) bd ...)
     ;; (receive (t ...) z (%alet (p ...) (nv ...) (bn ...) bd ...)))
     (call-with-values (lambda () z)
       (lambda (t ...) (%alet (p ...) (nv ...) (bn ...) bd ...))))
    ((%alet "not" (p ...) (nv ...) (t ...) (z) (bn ...) bd ...)
     (apply (lambda (t ...) (%alet (p ...) (nv ...) (bn ...) bd ...)) z))

    ((%alet (p ...) (nv ...) ((a) bn ...) bd ...)
     (call-with-current-continuation
      (lambda (t) (%alet (p ...) (nv ... (a t)) (bn ...) bd ...))))

    ((%alet (p ...) (nv ...) (a bn ...) bd ...)
     (%alet "rot" (p ...) (nv ...) () a (bn ...) bd ...))
    ((%alet "rot" (p ...) (nv ...) (new-bn ...) (a . b) (bn ...) bd ...)
     (%alet "rot" (p ...) (nv ...) (new-bn ... a) b (bn ...) bd ...)) 
    ((%alet "rot" (p ...) (nv ...) (new-bn ...) b (bn ...) bd ...)
     (%alet (b (p ...) (nv ...) (bn ...)) () (new-bn ...) bd ...))))

(define-syntax alet
  (syntax-rules ()
    ((alet (bn ...) bd ...)
     (%alet () () (bn ...) bd ...))
    ((alet var (bn ...) bd ...)
     (%alet (var) () (bn ...) bd ...))))

(define-syntax %alet*
  (syntax-rules (adbmal values cons rec and opt quote quasiquote unquote)
    ((%alet* () (n ...) () bd ...)
     ((lambda () bd ...)))
    ((%alet* (var) (n ...) () bd ...)
     ((letrec ((var (lambda* (n ...) bd ...))) ;for duplication
	var) n ...))
    ((%alet* (var (p ...) (nn ...) (bn ...)) (n ...) () bd ...)
     ((letrec ((var (lambda* (n ...)	;for duplication
		      (%alet* (p ...) (nn ... n ... var) (bn ...) bd ...))))
	var) n ...))

    ((%alet* (p ...) (n ...) (((a) b) bn ...) bd ...)
     ((lambda (a) (%alet* (p ...) (n ... a) (bn ...) bd ...)) b))

    ((%alet* (p ...) (n ...) (((adbmal . b) c) bn ...) bd ...)
     (%alet* "one" (p ...) (n ...) (adbmal) (b c) (bn ...) bd ...))
    ((%alet* (p ...) (n ...) (((values . b) c) bn ...) bd ...)
     (%alet* "one" (p ...) (n ...) (values) (b c) (bn ...) bd ...))
    ((%alet* (p ...) (n ...) (((cons a b) c) bn ...) bd ...)
     (let ((z c))			;should be exist!
       ((lambda (a b) (%alet* (p ...) (n ... a b) (bn ...) bd ...)) (car z) (cdr z))))
    ((%alet* (p ...) (n ...) (((a . b) c) bn ...) bd ...)
     (%alet* "one" (p ...) (n ... a) (a) (b c) (bn ...) bd ...))
    ((%alet* "one" (p ...) (n ...) (r ...) ((a . b) c) (bn ...) bd ...)
     (%alet* "one" (p ...) (n ... a) (r ... a) (b c) (bn ...) bd ...))
    ((%alet* "one" (p ...) (n ...) (adbmal r ...) (() c) (bn ...) bd ...)
     (c (lambda (r ...) (%alet* (p ...) (n ...) (bn ...) bd ...))))
    ((%alet* "one" (p ...) (n ...) (values r ...) (() c) (bn ...) bd ...)
     ;; (receive (r ...) c (%alet* (p ...) (n ...) (bn ...) bd ...)))
     (call-with-values (lambda () c)
       (lambda (r ...) (%alet* (p ...) (n ...) (bn ...) bd ...))))
    ((%alet* "one" (p ...) (n ...) (r ...) (() c) (bn ...) bd ...)
     (apply (lambda (r ...) (%alet* (p ...) (n ...) (bn ...) bd ...)) c))
    ((%alet* "one" (p ...) (n ...) (adbmal r ...) (b c) (bn ...) bd ...)
     (c (lambda (r ... . b) (%alet* (p ...) (n ... b) (bn ...) bd ...))))
    ((%alet* "one" (p ...) (n ...) (values r ...) (b c) (bn ...) bd ...)
     ;; (receive (r ... . b) c (%alet* (p ...) (n ... b) (bn ...) bd ...)))
     (call-with-values (lambda () c)
       (lambda (r ... . b) (%alet* (p ...) (n ... b) (bn ...) bd ...))))
    ((%alet* "one" (p ...) (n ...) (r ...) (b c) (bn ...) bd ...)
     (apply (lambda (r ... . b) (%alet* (p ...) (n ... b) (bn ...) bd ...)) c))

    ((%alet* (p ...) (n ...) (((a . b) c d ...) bn ...) bd ...)
     (%alet* "dot" (p ...) (n ... a) (a) (b c d ...) (bn ...) bd ...))
    ((%alet* "dot" (p ...) (n ...) (r ...) ((a . b) c d ...) (bn ...) bd ...)
     (%alet* "dot" (p ...) (n ... a) (r ... a) (b c d ...) (bn ...) bd ...))
    ((%alet* "dot" (p ...) (n ...) (r ...) (() c d ...) (bn ...) bd ...)
     ((lambda (r ...) (%alet* (p ...) (n ...) (bn ...) bd ...)) c d ...))
    ((%alet* "dot" (p ...) (n ...) (r ...) (b c d ...) (bn ...) bd ...)
     ((lambda (r ... . b) (%alet* (p ...) (n ... b) (bn ...) bd ...)) c d ...))
    
    ((%alet* (p ...) (n ...) ((and (n1 v1 t1 ...) (n2 v2 t2 ...) ...) bn ...) bd ...)
     (alet-and* ((n1 v1 t1 ...) (n2 v2 t2 ...) ...)
		(%alet* (p ...) (n ... n1 n2 ...) (bn ...) bd ...)))

    ((%alet* (p ...) (n ...) ((rec (n1 v1) (n2 v2) ...) bn ...) bd ...)
     (letrec* ((n1 v1) (n2 v2) ...)
       (%alet* (p ...) (n ... n1 n2 ...) (bn ...) bd ...)))

    ((%alet* (p ...) (n ...) ((a b) bn ...) bd ...)
     ((lambda (a) (%alet* (p ...) (n ... a) (bn ...) bd ...)) b))

    ((%alet* (p ...) (m ...) ((opt z . e) bn ...) bd ...)
     (let ((y z))
       (%alet* "opt" (p ...) (m ...) y e (bn ...) bd ...)))
    ((%alet* "opt" (p ...) (m ...) z ((('n k ...) d t ...) . e) (bn ...) bd ...)
     (let ((n (if (null? z) d (wow-key! z 2 (n k ...) d t ...))))
       (%alet* "opt" (p ...) (m ... n) z e (bn ...) bd ...)))
    ((%alet* "opt" (p ...) (m ...) z (((`n k ...) d t ...) . e) (bn ...) bd ...)
     (let ((n (if (null? z) d (wow-key! z 1 (n k ...) d t ...))))
       (%alet* "opt" (p ...) (m ... n) z e (bn ...) bd ...)))
    ((%alet* "opt" (p ...) (m ...) z (('n d t ...) . e) (bn ...) bd ...)
     (let ((n (if (null? z) d (wow-key! z 2 (n 'n eq?) d t ...))))
       (%alet* "opt" (p ...) (m ... n) z e (bn ...) bd ...)))
    ((%alet* "opt" (p ...) (m ...) z ((`n d t ...) . e) (bn ...) bd ...)
     (let ((n (if (null? z) d (wow-key! z 1 (n `n eq?) d t ...))))
       (%alet* "opt" (p ...) (m ... n) z e (bn ...) bd ...)))
    ((%alet* "opt" (p ...) (m ...) z ((,n d t ...) . e) (bn ...) bd ...)
     (let ((n (if (null? z) d (wow-cat! z n d t ...))))
       (%alet* "opt" (p ...) (m ... n) z e (bn ...) bd ...)))
    ((%alet* "opt" (p ...) (m ...) z (((n k) d) . e) (bn ...) bd ...)
     (let* ((z (if (null? z) (cons d z) (wow-key z k d)))
	    (n (car z))
	    (z (cdr z)))
       (%alet* "opt" (p ...) (m ... n) z e (bn ...) bd ...)))
    ((%alet* "opt" (p ...) (m ...) z ('n . e) (bn ...) bd ...)
     (let ((n (if (null? z) #f (wow-key! z 2 (n 'n eq?) #f))))
       (%alet* "opt" (p ...) (m ... n) z e (bn ...) bd ...)))
    ((%alet* "opt" (p ...) (m ...) z (`n . e) (bn ...) bd ...)
     (let ((n (if (null? z) #f (wow-key! z 1 (n `n eq?) #f))))
       (%alet* "opt" (p ...) (m ... n) z e (bn ...) bd ...)))
    ((%alet* "opt" (p ...) (m ...) z (,n . e) (bn ...) bd ...)
     (let ((n (if (null? z) #f (wow-cat! z n #f))))
       (%alet* "opt" (p ...) (m ... n) z e (bn ...) bd ...)))
    ((%alet* "opt" (p ...) (m ...) z ((n d) . e) (bn ...) bd ...)
     (let ((y (if (null? z) z (cdr z)))
	   (n (if (null? z) d (car z))))
       (%alet* "opt" (p ...) (m ... n) y e (bn ...) bd ...)))
    ((%alet* "opt" (p ...) (m ...) z ((n d t ...) . e) (bn ...) bd ...)
     (let ((y (if (null? z) z (cdr z)))
	   (n (if (null? z) d (wow-opt n (car z) t ...))))
       (%alet* "opt" (p ...) (m ... n) y e (bn ...) bd ...)))
    ((%alet* "opt" (p ...) (m ...) z (n . e) (bn ...) bd ...)
     (let ((y (if (null? z) z (cdr z)))
	   (n (if (null? z) #f (car z))))
       (%alet* "opt" (p ...) (m ... n) y e (bn ...) bd ...)))
    ((%alet* "opt" (p ...) (m ...) z () (bn ...) bd ...)
     (if (null? z)
	 (%alet* (p ...) (m ...) (bn ...) bd ...)
	 (error 'alet* "too many arguments" z)))
    ((%alet* "opt" (p ...) (m ...) z e (bn ...) bd ...)
     (let ((e z))
       (%alet* (p ...) (m ... e) (bn ...) bd ...)))

    ((%alet* (p ...) (n ...) ((adbmal a b c ...) bn ...) bd ...)
     (%alet* "not" (p ...) (n ... a) (adbmal a) (b c ...) (bn ...) bd ...))
    ((%alet* (p ...) (n ...) ((values a b c ...) bn ...) bd ...)
     (%alet* "not" (p ...) (n ... a) (values a) (b c ...) (bn ...) bd ...))
    ((%alet* (p ...) (n ...) ((cons a b c) bn ...) bd ...)
     (let ((z c))			;should be exist!
       ((lambda (a b) (%alet* (p ...) (n ... a b) (bn ...) bd ...)) (car z) (cdr z))))
    ((%alet* (p ...) (n ...) ((a b c ...) bn ...) bd ...)
     (%alet* "not" (p ...) (n ... a) (a) (b c ...) (bn ...) bd ...))
    ((%alet* "not" (p ...) (n ...) (r ...) (a b c ...) (bn ...) bd ...)
     (%alet* "not" (p ...) (n ... a) (r ... a) (b c ...) (bn ...) bd ...))
    ((%alet* "not" (p ...) (n ...) (adbmal r ...) (z) (bn ...) bd ...)
     (z (lambda (r ...) (%alet* (p ...) (n ...) (bn ...) bd ...))))
    ((%alet* "not" (p ...) (n ...) (values r ...) (z) (bn ...) bd ...)
     ;; (receive (r ...) z (%alet* (p ...) (n ...) (bn ...) bd ...)))
     (call-with-values (lambda () z)
       (lambda (r ...) (%alet* (p ...) (n ...) (bn ...) bd ...))))
    ((%alet* "not" (p ...) (n ...) (r ...) (z) (bn ...) bd ...)
     (apply (lambda (r ...) (%alet* (p ...) (n ...) (bn ...) bd ...)) z))

    ((%alet* (p ...) (n ...) ((a) bn ...) bd ...)
     (call-with-current-continuation
      (lambda (a) (%alet* (p ...) (n ... a) (bn ...) bd ...))))

    ((%alet* (p ...) (n ...) (a bn ...) bd ...)
     (%alet* "rot" (p ...) (n ...) () a (bn ...) bd ...))
    ((%alet* "rot" (p ...) (n ...) (new-bn ...) (a . b) (bn ...) bd ...)
     (%alet* "rot" (p ...) (n ...) (new-bn ... a) b (bn ...) bd ...)) 
    ((%alet* "rot" (p ...) (n ...) (new-bn ...) b (bn ...) bd ...)
     (%alet* (b (p ...) (n ...) (bn ...)) () (new-bn ...) bd ...))))

(define-syntax alet*
  (syntax-rules ()
    ((alet* (bn ...) bd ...)
     (%alet* () () (bn ...) bd ...))
    ((alet* var (bn ...) bd ...)
     (%alet* (var) () (bn ...) bd ...))))

;;; eof
